import { PROTOCOLS } from '../constants';
import type { Core, PayloadParams } from '@appium/types';
import type { RouteConfiguringFunction } from '../express/server';
export declare const CREATE_SESSION_COMMAND = "createSession";
export declare const DELETE_SESSION_COMMAND = "deleteSession";
export declare const GET_STATUS_COMMAND = "getStatus";
export declare const LIST_DRIVER_COMMANDS_COMMAND = "listCommands";
export declare const LIST_DRIVER_EXTENSIONS_COMMAND = "listExtensions";
export declare const deprecatedCommandsLogged: Set<string>;
export declare function determineProtocol(createSessionArgs: any[]): keyof typeof PROTOCOLS;
export declare function isSessionCommand(command: string): boolean;
export declare function checkParams(paramSpec: PayloadParams, args: Record<string, any>, protocol?: keyof typeof PROTOCOLS): Record<string, any>;
export declare function makeArgs(requestParams: PayloadParams, jsonObj: any, payloadParams: PayloadParams): any[];
export declare function validateExecuteMethodParams(params: any[], paramSpec?: PayloadParams): any[];
export declare function routeConfiguringFunction(driver: Core<any>): RouteConfiguringFunction;
export declare function driverShouldDoJwpProxy(driver: Core<any>, req: import('express').Request, command: string): boolean;
//# sourceMappingURL=protocol.d.ts.map