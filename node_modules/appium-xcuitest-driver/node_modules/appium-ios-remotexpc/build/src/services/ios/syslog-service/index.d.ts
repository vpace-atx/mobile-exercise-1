import type { PacketData } from 'appium-ios-tuntap';
import { EventEmitter } from 'events';
import type { PacketSource, SyslogOptions, SyslogService as SyslogServiceInterface } from '../../../lib/types.js';
import { type Service } from '../base-service.js';
/**
 * syslog-service provides functionality to capture and process syslog messages
 * from a remote device using Apple's XPC services.
 */
declare class SyslogService extends EventEmitter implements SyslogServiceInterface {
    private readonly baseService;
    private connection;
    private packetConsumer;
    private packetStreamPromise;
    private isCapturing;
    private enableVerboseLogging;
    /**
     * Creates a new syslog-service instance
     * @param address Tuple containing [host, port]
     */
    constructor(address: [string, number]);
    /**
     * Starts capturing syslog data from the device
     * @param service Service information
     * @param packetSource Source of packet data (can be PacketConsumer or AsyncIterable)
     * @param options Configuration options for syslog capture
     * @returns Promise resolving to the initial response from the service
     */
    start(service: Service, packetSource: PacketSource | AsyncIterable<PacketData>, options?: SyslogOptions): Promise<void>;
    /**
     * Stops capturing syslog data
     * @returns Promise that resolves when capture is stopped
     */
    stop(): Promise<void>;
    /**
     * Restart the device
     * @param service Service information
     * @returns Promise that resolves when the restart request is sent
     */
    restart(service: Service): Promise<void>;
    private attachPacketSource;
    private isPacketSource;
    private processPacketStream;
    private processPacket;
    /**
     * Detaches the packet source
     */
    private detachPacketSource;
    /**
     * Closes the current connection
     */
    private closeConnection;
    /**
     * Processes a TCP packet
     * @param packet TCP packet to process
     */
    private processTcpPacket;
    private processPlistPacket;
    private processTextPacket;
    private emitTextMessage;
    private emitMessage;
    /**
     * Checks if the buffer might be a plist (XML or binary)
     * @param buffer Buffer to check
     * @returns True if the buffer might be a plist
     */
    private mightBePlist;
    /**
     * Processes a UDP packet
     * @param packet UDP packet to process
     */
    private processUdpPacket;
    /**
     * Logs packet details for debugging
     * @param packet Packet to log details for
     */
    private logPacketDetails;
    /**
     * Extracts printable text from a buffer
     * @param buffer Buffer to extract text from
     * @returns Printable text
     */
    private extractPrintableText;
    /**
     * Determines if a buffer contains mostly printable ASCII characters
     * @param buffer Buffer to analyze
     * @returns True if more than 50% of characters are printable ASCII
     */
    private isMostlyPrintable;
}
export default SyslogService;
//# sourceMappingURL=index.d.ts.map