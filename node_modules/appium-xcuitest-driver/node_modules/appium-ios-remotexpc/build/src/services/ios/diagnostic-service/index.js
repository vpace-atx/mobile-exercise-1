import { logger } from '@appium/support';
import { PlistServiceDecoder } from '../../../lib/plist/plist-decoder.js';
import { BaseService } from '../base-service.js';
const log = logger.getLogger('DiagnosticService');
/**
 * DiagnosticsService provides an API to:
 * - Query MobileGestalt & IORegistry keys
 * - Reboot, shutdown or put the device in sleep mode
 * - Get WiFi information
 */
class DiagnosticsService extends BaseService {
    static RSD_SERVICE_NAME = 'com.apple.mobile.diagnostics_relay.shim.remote';
    constructor(address) {
        super(address);
    }
    /**
     * Restart the device
     * @returns Promise that resolves when the restart request is sent
     */
    async restart() {
        try {
            const request = {
                Request: 'Restart',
            };
            return await this.sendRequest(request);
        }
        catch (error) {
            log.error(`Error restarting device: ${error}`);
            throw error;
        }
    }
    /**
     * Shutdown the device
     * @returns Promise that resolves when the shutdown request is sent
     */
    async shutdown() {
        try {
            const request = {
                Request: 'Shutdown',
            };
            return await this.sendRequest(request);
        }
        catch (error) {
            log.error(`Error shutting down device: ${error}`);
            throw error;
        }
    }
    /**
     * Put the device in sleep mode
     * @returns Promise that resolves when the sleep request is sent
     */
    async sleep() {
        try {
            const request = {
                Request: 'Sleep',
            };
            return await this.sendRequest(request);
        }
        catch (error) {
            log.error(`Error putting device to sleep: ${error}`);
            throw error;
        }
    }
    /**
     * Query IORegistry
     * @returns Object containing the IORegistry information
     * @param options
     */
    async ioregistry(options) {
        try {
            const request = {
                Request: 'IORegistry',
            };
            if (options?.plane) {
                request.CurrentPlane = options.plane;
            }
            if (options?.name) {
                request.EntryName = options.name;
            }
            if (options?.ioClass) {
                request.EntryClass = options.ioClass;
            }
            PlistServiceDecoder.lastDecodedResult = null;
            const timeout = options?.timeout || 3000;
            log.debug('Sending IORegistry request...');
            const conn = await this.connectToDiagnosticService();
            const response = await conn.sendPlistRequest(request, timeout);
            log.debug(`IORegistry response size: ${JSON.stringify(response).length} bytes`);
            if (options?.returnRawJson) {
                return await this.handleMultipartIORegistryResponse(conn, response, timeout);
            }
            return this.processIORegistryResponse(response);
        }
        catch (error) {
            log.error(`Error querying IORegistry: ${error}`);
            throw error;
        }
    }
    getServiceConfig() {
        return {
            serviceName: DiagnosticsService.RSD_SERVICE_NAME,
            port: this.address[1].toString(),
        };
    }
    async connectToDiagnosticService() {
        const service = this.getServiceConfig();
        return await this.startLockdownService(service);
    }
    async sendRequest(request, timeout) {
        const conn = await this.connectToDiagnosticService();
        const response = await conn.sendPlistRequest(request, timeout);
        log.debug(`${request.Request} response received`);
        if (!response) {
            return {};
        }
        if (Array.isArray(response)) {
            return response.length > 0 ? response[0] : {};
        }
        return response;
    }
    processIORegistryResponse(response) {
        if (PlistServiceDecoder.lastDecodedResult) {
            if (Array.isArray(PlistServiceDecoder.lastDecodedResult)) {
                return PlistServiceDecoder.lastDecodedResult;
            }
            return [PlistServiceDecoder.lastDecodedResult];
        }
        if (!response) {
            throw new Error('Invalid response from IORegistry');
        }
        if (Array.isArray(response)) {
            if (response.length === 0 && typeof response === 'object') {
                log.debug('Received empty array response');
                return [{ IORegistryResponse: 'No data found' }];
            }
            return response;
        }
        if (typeof response === 'object' &&
            !Buffer.isBuffer(response) &&
            !(response instanceof Date)) {
            const responseObj = response;
            if (responseObj.Diagnostics &&
                typeof responseObj.Diagnostics === 'object') {
                return [responseObj.Diagnostics];
            }
            return [responseObj];
        }
        return [{ value: response }];
    }
    async handleMultipartIORegistryResponse(conn, initialResponse, timeout) {
        await new Promise((resolve) => setTimeout(resolve, 500));
        const emptyRequest = {
            Request: 'Status',
        };
        log.debug('Sending follow-up request for additional data');
        const additionalResponse = await conn.sendPlistRequest(emptyRequest, timeout);
        const hasDiagnostics = 'Diagnostics' in additionalResponse &&
            typeof additionalResponse.Diagnostics === 'object' &&
            additionalResponse.Diagnostics !== null &&
            'IORegistry' in additionalResponse.Diagnostics;
        if (additionalResponse.Status !== 'Success' && hasDiagnostics) {
            throw new Error(`Error getting diagnostic data: ${additionalResponse}`);
        }
        log.debug('Using additional response with IORegistry data');
        return additionalResponse.Diagnostics.IORegistry;
    }
}
export default DiagnosticsService;
