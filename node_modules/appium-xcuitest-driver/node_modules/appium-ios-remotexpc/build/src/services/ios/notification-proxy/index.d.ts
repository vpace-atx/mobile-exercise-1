import type { NotificationProxyService as NotificationProxyServiceInterface, PlistDictionary, PlistMessage } from '../../../lib/types.js';
import { ServiceConnection } from '../../../service-connection.js';
import { BaseService } from '../base-service.js';
export interface ObserveNotificationRequest extends PlistDictionary {
    Command: 'ObserveNotification';
    Name: string;
}
export interface PostNotificationRequest extends PlistDictionary {
    Command: 'PostNotification';
    Name: string;
}
/**
 * NotificationProxyService provides an API to:
 * - Observe notifications
 * - Post notifications
 * - Expects notifications
 */
declare class NotificationProxyService extends BaseService implements NotificationProxyServiceInterface {
    static readonly RSD_SERVICE_NAME = "com.apple.mobile.notification_proxy.shim.remote";
    private readonly timeout;
    private _conn;
    private _pendingNotificationsObservationSet;
    constructor(address: [string, number], timeout?: number);
    /**
     * Observe a notification
     * @param notification The notification name to subscribe to
     * @returns Promise that resolves when the subscription request is sent
     */
    observe(notification: string): Promise<PlistDictionary>;
    /**
     * Post a notification
     * @param notification The notification name to post
     * @returns Promise that resolves when the post request is sent
     */
    post(notification: string): Promise<PlistDictionary>;
    /**
     * Expect notifications as an async generator
     * @param timeout Timeout in milliseconds
     * @returns AsyncGenerator yielding PlistMessage objects
     */
    expectNotifications(timeout?: number): AsyncGenerator<PlistMessage>;
    /**
     * Expect a single notification
     * @param timeout Timeout in milliseconds
     * @returns Promise resolving to the expected notification
     */
    expectNotification(timeout?: number): Promise<PlistMessage>;
    /**
     * Connect to the notification proxy service
     * @returns Promise resolving to the ServiceConnection instance
     */
    connectToNotificationProxyService(): Promise<ServiceConnection>;
    private createObserveNotificationRequest;
    private createPostNotificationRequest;
    private getServiceConfig;
    private sendPlistDictionary;
}
export { NotificationProxyService };
//# sourceMappingURL=index.d.ts.map