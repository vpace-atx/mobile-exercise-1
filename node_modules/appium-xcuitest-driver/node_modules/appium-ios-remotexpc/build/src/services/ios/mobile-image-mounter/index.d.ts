import type { MobileImageMounterService as MobileImageMounterServiceInterface, PlistDictionary } from '../../../lib/types.js';
import { BaseService } from '../base-service.js';
/**
 * Base interface for service responses
 */
interface BaseResponse {
    Status?: string;
    Error?: string;
    DetailedError?: string;
}
/**
 * Interface for image-related responses
 */
export interface ImageResponse extends BaseResponse {
    ImagePresent?: boolean;
    ImageSignature?: Buffer[] | Buffer;
}
/**
 * MobileImageMounterService provides an API to:
 * - Mount Developer Disk Images on iOS devices
 * - Lookup mounted images and their signatures
 * - Check if personalized images are mounted
 * - Unmount images when needed
 */
declare class MobileImageMounterService extends BaseService implements MobileImageMounterServiceInterface {
    static readonly RSD_SERVICE_NAME = "com.apple.mobile.mobile_image_mounter.shim.remote";
    private static readonly FILE_TYPE_IMAGE;
    private static readonly FILE_TYPE_BUILD_MANIFEST;
    private static readonly FILE_TYPE_TRUST_CACHE;
    private static readonly IMAGE_TYPE;
    private static readonly MOUNT_PATH;
    private static readonly UPLOAD_IMAGE_TIMEOUT;
    private connection;
    constructor(address: [string, number]);
    /**
     * Clean up resources when service is no longer needed
     */
    cleanup(): Promise<void>;
    /**
     * Lookup mounted images by type
     * @param imageType Type of image to lookup (defaults to 'Personalized')
     * @returns Array of signatures of mounted images
     */
    lookup(imageType?: string): Promise<Buffer[]>;
    /**
     * Check if personalized image is mounted
     * @returns True if personalized image is mounted
     */
    isPersonalizedImageMounted(): Promise<boolean>;
    /**
     * Mount personalized image for device (iOS >= 17)
     * @param imageFilePath Path to the image file (.dmg)
     * @param buildManifestFilePath Path to the build manifest file (.plist)
     * @param trustCacheFilePath Path to the trust cache file (.trustcache)
     * @param infoPlist Optional info plist dictionary
     */
    mount(imageFilePath: string, buildManifestFilePath: string, trustCacheFilePath: string, infoPlist?: PlistDictionary): Promise<void>;
    /**
     * Unmount image from device
     * @param mountPath Mount path to unmount (defaults to '/System/Developer')
     */
    unmountImage(mountPath?: string): Promise<void>;
    /**
     * Query developer mode status (iOS 16+)
     * @returns True if developer mode is enabled (defaults to true for older iOS)
     */
    queryDeveloperModeStatus(): Promise<boolean>;
    /**
     * Query personalization nonce for personalized images
     * @param personalizedImageType Optional personalized image type
     * @returns Personalization nonce as Buffer
     */
    queryNonce(personalizedImageType?: string): Promise<Buffer>;
    /**
     * Query personalization identifiers from the device
     * @returns Personalization identifiers dictionary
     */
    queryPersonalizationIdentifiers(): Promise<PlistDictionary>;
    /**
     * Copy devices info (only for mounted images)
     * @returns List of mounted devices
     */
    copyDevices(): Promise<any[]>;
    /**
     * Query personalization manifest from device
     * @param imageType The image type
     * @param signature The image signature/hash
     * @returns Personalization manifest as Buffer
     */
    queryPersonalizationManifest(imageType: string, signature: Buffer): Promise<Buffer>;
    /**
     * Upload image to device
     * @param imageType The image type
     * @param image The image data
     * @param signature The image signature/manifest
     * @param timeout Optional timeout for upload operation (defaults to 20000ms)
     */
    uploadImage(imageType: string, image: Buffer, signature: Buffer, timeout?: number): Promise<void>;
    /**
     * Mount image on device
     * @param imageType The image type
     * @param signature The image signature/manifest
     * @param extras Additional parameters for mounting
     */
    mountImage(imageType: string, signature: Buffer, extras?: Record<string, any>): Promise<void>;
    private sendRequest;
    /**
     * Calculate hash of a buffer asynchronously
     * @param buffer The buffer to hash
     * @returns Promise resolving to the hash digest
     */
    private hashLargeBufferAsync;
    private getOrRetrieveManifestFromTSS;
    private isConnectionDestroyed;
    private connectToMobileImageMounterService;
    private closeConnection;
    private checkIfError;
    private assertIsFile;
}
export default MobileImageMounterService;
export { MobileImageMounterService };
//# sourceMappingURL=index.d.ts.map