import { logger } from '@appium/support';
import { ServiceConnection } from '../../../service-connection.js';
import { BaseService } from '../base-service.js';
const log = logger.getLogger('NotificationProxyService');
/**
 * NotificationProxyService provides an API to:
 * - Observe notifications
 * - Post notifications
 * - Expects notifications
 */
class NotificationProxyService extends BaseService {
    static RSD_SERVICE_NAME = 'com.apple.mobile.notification_proxy.shim.remote';
    timeout;
    _conn = null;
    _pendingNotificationsObservationSet = new Set();
    constructor(address, timeout = 10000) {
        super(address);
        this.timeout = timeout;
    }
    /**
     * Observe a notification
     * @param notification The notification name to subscribe to
     * @returns Promise that resolves when the subscription request is sent
     */
    async observe(notification) {
        if (!this._conn) {
            this._conn = await this.connectToNotificationProxyService();
        }
        const request = this.createObserveNotificationRequest(notification);
        const result = await this.sendPlistDictionary(request);
        this._pendingNotificationsObservationSet.add(notification);
        return result;
    }
    /**
     * Post a notification
     * @param notification The notification name to post
     * @returns Promise that resolves when the post request is sent
     */
    async post(notification) {
        if (!this._pendingNotificationsObservationSet.has(notification)) {
            log.error('Posting notifications without observing them may not yield any results. ' +
                'Consider calling observe() first.');
            throw new Error('You must call observe() before posting notifications.');
        }
        this._conn = await this.connectToNotificationProxyService();
        const request = this.createPostNotificationRequest(notification);
        const result = await this.sendPlistDictionary(request);
        this._pendingNotificationsObservationSet.delete(notification);
        return result;
    }
    /**
     * Expect notifications as an async generator
     * @param timeout Timeout in milliseconds
     * @returns AsyncGenerator yielding PlistMessage objects
     */
    async *expectNotifications(timeout = 120000) {
        if (!this._conn) {
            this._conn = await this.connectToNotificationProxyService();
        }
        while (true) {
            try {
                const notification = await this._conn.receive(timeout);
                const notificationStr = JSON.stringify(notification);
                const truncatedStr = notificationStr.length > 500
                    ? `${notificationStr.substring(0, 500)}...`
                    : notificationStr;
                log.info(`received response: ${truncatedStr}`);
                yield notification;
            }
            catch (error) {
                log.error(`Error receiving notification: ${error.message}`);
                throw error;
            }
        }
    }
    /**
     * Expect a single notification
     * @param timeout Timeout in milliseconds
     * @returns Promise resolving to the expected notification
     */
    async expectNotification(timeout = 120000) {
        const generator = this.expectNotifications(timeout);
        const { value, done } = await generator.next();
        if (done || !value) {
            throw new Error('No notification received');
        }
        return value;
    }
    /**
     * Connect to the notification proxy service
     * @returns Promise resolving to the ServiceConnection instance
     */
    async connectToNotificationProxyService() {
        if (this._conn) {
            return this._conn;
        }
        const service = this.getServiceConfig();
        this._conn = await this.startLockdownService(service);
        return this._conn;
    }
    createObserveNotificationRequest(notification) {
        return {
            Command: 'ObserveNotification',
            Name: notification,
        };
    }
    createPostNotificationRequest(notification) {
        return {
            Command: 'PostNotification',
            Name: notification,
        };
    }
    getServiceConfig() {
        return {
            serviceName: NotificationProxyService.RSD_SERVICE_NAME,
            port: this.address[1].toString(),
            options: { createConnectionTimeout: this.timeout },
        };
    }
    async sendPlistDictionary(request) {
        if (!this._conn) {
            this._conn = await this.connectToNotificationProxyService();
        }
        const response = await this._conn.sendPlistRequest(request, this.timeout);
        if (!response) {
            return {};
        }
        if (Array.isArray(response)) {
            return response.length > 0 ? response[0] : {};
        }
        return response;
    }
}
export { NotificationProxyService };
