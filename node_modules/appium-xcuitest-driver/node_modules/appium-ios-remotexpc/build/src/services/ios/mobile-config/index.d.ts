import { type MobileConfigService as MobileConfigServiceInterface, type PlistDictionary } from '../../../lib/types.js';
import { ServiceConnection } from '../../../service-connection.js';
import { BaseService } from '../base-service.js';
/**
 * MobileConfigService provides an API to:
 * - Install configuration profiles
 * - Remove configuration profiles
 * - List installed configuration profiles
 */
declare class MobileConfigService extends BaseService implements MobileConfigServiceInterface {
    static readonly RSD_SERVICE_NAME = "com.apple.mobile.MCInstall.shim.remote";
    private _conn;
    constructor(address: [string, number]);
    /**
     * Connect to the mobile config service
     * @returns Promise resolving to the ServiceConnection instance
     */
    connectToMobileConfigService(): Promise<ServiceConnection>;
    /**
     * Get all profiles of iOS devices
     * @returns {Promise<PlistDictionary>}
     * e.g.
     * {
     *   OrderedIdentifiers: [ '2fac1c2b3d684843189b2981c718b0132854a847a' ],
     *   ProfileManifest: {
     *     '2fac1c2b3d684843189b2981c718b0132854a847a': {
     *       Description: 'Charles Proxy CA (7 Dec 2020, MacBook-Pro.local)',
     *       IsActive: true
     *     }
     *   },
     *   ProfileMetadata: {
     *     '2fac1c2b3d684843189b2981c718b0132854a847a': {
     *       PayloadDisplayName: 'Charles Proxy CA (7 Dec 2020, MacBook-Pro.local)',
     *       PayloadRemovalDisallowed: false,
     *       PayloadUUID: 'B30005CC-BC73-4E42-8545-8DA6C44A8A71',
     *       PayloadVersion: 1
     *     }
     *   },
     *   Status: 'Acknowledged'
     * }
     */
    getProfileList(): Promise<PlistDictionary>;
    /**
     * Install profile from path to iOS device
     * The phone must be unlocked before installing the profile
     * @param {String} filePath  must be a certificate file .PEM .CER and more formats
     * e.g: /Downloads/charles-certificate.pem
     */
    installProfileFromPath(filePath: string): Promise<void>;
    /**
     * Install profile to iOS device from buffer
     * The phone must be unlocked before installing the profile
     * @param {Buffer} payload  must be a certificate file buffer .PEM .CER and more formats
     */
    installProfileFromBuffer(payload: Buffer): Promise<void>;
    /**
     * Remove profile from iOS device
     * @param {String} identifier Query identifier list through getProfileList method
     */
    removeProfile(identifier: string): Promise<void>;
    private _sendPlistAndReceive;
    private getServiceConfig;
}
export { MobileConfigService };
//# sourceMappingURL=index.d.ts.map