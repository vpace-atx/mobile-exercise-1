import { Socket } from 'node:net';
import { PlistService, type PlistServiceOptions } from './lib/plist/plist-service.js';
import type { PlistDictionary } from './lib/types.js';
/**
 * Message type for plist communications
 */
type PlistMessage = PlistDictionary;
/**
 * Base class for services that use PlistService for communication
 */
export declare abstract class BasePlistService {
    /**
     * Sends a message and waits for a response
     * @param message The message to send
     * @param timeout Timeout in milliseconds
     * @returns Promise resolving to the response
     */
    sendAndReceive(message: PlistMessage, timeout?: number): Promise<PlistMessage>;
    /**
     * Closes the underlying connection
     */
    close(): void;
    /**
     * Waits for a message
     * @param timeout Timeout in milliseconds
     * @returns Promise resolving to the received message
     */
    receive(timeout?: number): Promise<PlistMessage>;
    /**
     * Gets the PlistService instance
     * @returns The PlistService instance
     */
    protected getPlistService(): PlistService;
    /**
     * The underlying PlistService instance
     */
    protected _plistService: PlistService;
    /**
     * Creates a new BasePlistService
     * @param plistServiceOrSocket PlistService instance or Socket
     * @param options Configuration options for PlistService
     */
    protected constructor(plistServiceOrSocket: PlistService | Socket, options?: PlistServiceOptions);
    /**
     * Sends a message without waiting for a response
     * @param message The message to send
     */
    protected send(message: PlistMessage): void;
}
export {};
//# sourceMappingURL=base-plist-service.d.ts.map