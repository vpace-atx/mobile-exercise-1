import { Socket } from 'node:net';
import { type ConnectionOptions, TLSSocket } from 'tls';
import { BasePlistService } from '../../base-plist-service.js';
import type { PlistMessage, PlistValue } from '../types.js';
import { RelayService } from '../usbmux/index.js';
interface DeviceProperties {
    ConnectionSpeed: number;
    ConnectionType: string;
    DeviceID: number;
    LocationID: number;
    ProductID: number;
    SerialNumber: string;
    USBSerialNumber: string;
}
interface Device {
    DeviceID: number;
    MessageType: string;
    Properties: DeviceProperties;
}
interface LockdownServiceInfo {
    lockdownService: LockdownService;
    device: Device;
}
interface SessionInfo {
    sessionID: string;
    enableSessionSSL: boolean;
}
export declare class LockdownService extends BasePlistService {
    private readonly udid;
    private tlsService?;
    private isTLS;
    private tlsUpgradePromise?;
    private _relayService?;
    private readonly tlsManager;
    private readonly deviceManager;
    constructor(socket: Socket, udid: string, autoSecure?: boolean);
    /**
     * Starts a lockdown session
     */
    startSession(hostID: string, systemBUID: string, timeout?: number): Promise<SessionInfo>;
    /**
     * Attempts to upgrade the connection to TLS
     */
    tryUpgradeToTLS(): Promise<void>;
    /**
     * Gets the current socket (TLS or regular)
     */
    getSocket(): Socket | TLSSocket;
    /**
     * Sends a message and receives a response
     */
    sendAndReceive(msg: Record<string, PlistValue>, timeout?: number): Promise<PlistMessage>;
    /**
     * Closes the service and associated resources
     */
    close(): void;
    /**
     * Sets the relay service for this lockdown instance
     */
    set relayService(relay: RelayService);
    /**
     * Gets the relay service for this lockdown instance
     */
    get relayService(): RelayService | undefined;
    /**
     * Waits for TLS upgrade to complete if in progress
     */
    waitForTLSUpgrade(): Promise<void>;
    /**
     * Stops the relay service with an optional custom message
     */
    stopRelayService(message?: string): void;
    private validatePairRecord;
    private performTLSUpgrade;
    private closeSocket;
}
export declare class LockdownServiceFactory {
    private readonly deviceManager;
    /**
     * Creates a LockdownService for a specific device UDID
     */
    createByUDID(udid: string, port?: number, autoSecure?: boolean): Promise<LockdownServiceInfo>;
}
export declare function createLockdownServiceByUDID(udid: string, port?: number, autoSecure?: boolean): Promise<LockdownServiceInfo>;
export declare function upgradeSocketToTLS(socket: Socket, tlsOptions?: Partial<ConnectionOptions>): Promise<TLSSocket>;
export {};
//# sourceMappingURL=index.d.ts.map