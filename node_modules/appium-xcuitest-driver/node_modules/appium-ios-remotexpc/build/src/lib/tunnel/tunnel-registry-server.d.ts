import type { TunnelRegistry } from '../types.js';
/**
 * Tunnel Registry Server - provides API endpoints for tunnel registry operations
 */
export declare class TunnelRegistryServer {
    private server?;
    port: number;
    tunnelsInfo?: TunnelRegistry;
    private registry;
    /**
     * Create a new TunnelRegistryServer
     * @param tunnelsInfo - Registry data object
     * @param port - Port to listen on
     */
    constructor(tunnelsInfo: TunnelRegistry | undefined, port: number);
    /**
     * Get tunnels from registry
     */
    private get tunnels();
    /**
     * Get auto-calculated metadata
     */
    private get metadata();
    /**
     * Get a complete registry with tunnels and metadata
     */
    private get fullRegistry();
    /**
     * Start the server
     */
    start(): Promise<void>;
    /**
     * Stop the server
     */
    stop(): Promise<void>;
    /**
     * Main request handler
     */
    private handleRequest;
    /**
     * Handler for getting all tunnels
     */
    private getAllTunnels;
    /**
     * Handler for getting a tunnel by UDID
     */
    private getTunnelByUdid;
    /**
     * Handler for getting a tunnel by device ID
     */
    private getTunnelByDeviceId;
    /**
     * Handler for updating a tunnel
     */
    private updateTunnel;
    /**
     * Load the registry from provided data
     */
    private loadRegistry;
}
/**
 * Create and start a TunnelRegistryServer instance
 * @param tunnelInfos - Registry data object
 * @param port - Port to listen on
 * @returns The started TunnelRegistryServer instance
 */
export declare function startTunnelRegistryServer(tunnelInfos: TunnelRegistry | undefined, port?: number): Promise<TunnelRegistryServer>;
//# sourceMappingURL=tunnel-registry-server.d.ts.map