import type { TunnelRegistry, TunnelRegistryEntry } from '../types.js';
/**
 * API client for tunnel registry operations
 * This client handles communication with the API server for tunnel data
 */
export declare class TunnelApiClient {
    private apiBaseUrl;
    /**
     * Create a new TunnelApiClient
     * @param apiBaseUrl - Base URL for the API server
     */
    constructor(apiBaseUrl?: string);
    /**
     * Set the API base URL
     * @param url - New base URL for the API server
     */
    setApiBaseUrl(url: string): void;
    /**
     * Get the API base URL
     * @returns The current API base URL
     */
    getApiBaseUrl(): string;
    /**
     * Fetch all tunnel registry data from the API server
     * @returns The complete tunnel registry
     */
    fetchRegistry(): Promise<TunnelRegistry>;
    /**
     * Get a specific tunnel by UDID
     * @param udid - Device UDID
     * @returns Tunnel registry entry or null if not found
     */
    getTunnelByUdid(udid: string): Promise<TunnelRegistryEntry | null>;
    /**
     * Get tunnel by device ID
     * @param deviceId - Device ID
     * @returns Tunnel registry entry or null if not found
     */
    getTunnelByDeviceId(deviceId: number): Promise<TunnelRegistryEntry | null>;
    /**
     * Get all tunnels
     * @returns Array of tunnel registry entries
     */
    getAllTunnels(): Promise<TunnelRegistryEntry[]>;
    /**
     * Check if a tunnel exists for a specific UDID
     * @param udid - Device UDID
     * @returns True if tunnel exists, false otherwise
     */
    hasTunnel(udid: string): Promise<boolean>;
    /**
     * Get registry metadata
     * @returns Registry metadata
     */
    getMetadata(): Promise<TunnelRegistry['metadata']>;
    /**
     * Get tunnel connection details formatted for easy use
     * @param udid - Device UDID
     * @returns Connection details or null if tunnel not found
     */
    getTunnelConnection(udid: string): Promise<{
        host: string;
        port: number;
        udid: string;
        packetStreamPort: number;
    } | null>;
    /**
     * List all available device UDIDs with tunnels
     * @returns Array of device UDIDs
     */
    getAvailableDevices(): Promise<string[]>;
    /**
     * Update or create a tunnel entry
     * @param entry - Tunnel registry entry to update or create
     * @returns True if successful, false otherwise
     */
    updateTunnel(entry: TunnelRegistryEntry): Promise<boolean>;
    /**
     * Delete a tunnel entry
     * @param udid - Device UDID
     * @returns True if successful, false otherwise
     */
    deleteTunnel(udid: string): Promise<boolean>;
}
//# sourceMappingURL=tunnel-api-client.d.ts.map