import { logger } from '@appium/support';
import fs from 'fs';
import path from 'path';
const log = logger.getLogger('PairRecord');
/**
 * Converts a buffer containing PEM data to a string
 * @param buffer - Buffer containing PEM data
 * @returns String representation of the PEM data
 */
function bufferToPEMString(buffer) {
    return buffer.toString('utf8');
}
/**
 * Processes raw response from plist.parsePlist and formats it into a proper pair-record
 * @param response - Response from plist.parsePlist(data.payload.PairRecordData)
 * @returns Formatted pair-record object with properly structured data
 */
export function processPlistResponse(response) {
    return {
        HostID: response.HostID || null,
        SystemBUID: response.SystemBUID || null,
        HostCertificate: response.HostCertificate
            ? bufferToPEMString(response.HostCertificate)
            : null,
        HostPrivateKey: response.HostPrivateKey
            ? bufferToPEMString(response.HostPrivateKey)
            : null,
        DeviceCertificate: response.DeviceCertificate
            ? bufferToPEMString(response.DeviceCertificate)
            : null,
        RootCertificate: response.RootCertificate
            ? bufferToPEMString(response.RootCertificate)
            : null,
        RootPrivateKey: response.RootPrivateKey
            ? bufferToPEMString(response.RootPrivateKey)
            : null,
        WiFiMACAddress: response.WiFiMACAddress || null,
        // For EscrowBag, we need it as a base64 string
        EscrowBag: response.EscrowBag
            ? response.EscrowBag.toString('base64')
            : null,
    };
}
/* --- File storage functions remain unchanged --- */
const RECORDS_DIR = path.join(process.cwd(), '../../.records');
async function ensureRecordsDirectoryExists() {
    await fs.promises.mkdir(RECORDS_DIR, { recursive: true, mode: 0o777 });
}
/**
 * Saves a pair record to the filesystem.
 * @param udid - Device UDID.
 * @param pairRecord - Pair record to save.
 * @returns Promise that resolves when record is saved.
 */
export async function savePairRecord(udid, pairRecord) {
    await ensureRecordsDirectoryExists();
    const recordPath = path.join(RECORDS_DIR, `${udid}-record.json`);
    try {
        await fs.promises.writeFile(recordPath, JSON.stringify(pairRecord, null, 2), { mode: 0o777 });
        log.info(`Pair record saved: ${recordPath}`);
    }
    catch (error) {
        log.error(`Failed to save pair record for ${udid}: ${error}`);
        throw error;
    }
}
/**
 * Gets a saved pair record from the filesystem.
 * @param udid - Device UDID.
 * @returns Promise that resolves with the pair record or null if not found.
 */
export async function getPairRecord(udid) {
    const recordPath = path.join(RECORDS_DIR, `${udid}-record.json`);
    try {
        const data = await fs.promises.readFile(recordPath, 'utf8');
        return JSON.parse(data);
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            return null;
        }
        log.error(`Failed to read pair record for ${udid}: ${error}`);
        throw error;
    }
}
