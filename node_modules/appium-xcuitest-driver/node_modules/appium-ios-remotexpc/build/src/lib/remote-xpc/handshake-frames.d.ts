declare class Struct {
    private readonly types;
    constructor(fmt: string);
    byteLength(): number;
    pack(...values: number[]): Buffer;
}
declare const STRUCT_HL: Struct;
type StreamAssociation = 'has-stream' | 'no-stream' | 'either';
declare class HyperframeError extends Error {
}
declare class InvalidDataError extends HyperframeError {
}
declare class Flag {
    name: string;
    bit: number;
    constructor(name: string, bit: number);
}
declare class Flags {
    definedFlags: Flag[];
    flags: Set<string>;
    constructor(definedFlags: Flag[]);
    add(flag: string): void;
    has(flag: string): boolean;
    toString(): string;
}
export declare class Frame {
    protected definedFlags: Flag[];
    type: number | null;
    streamAssociation: StreamAssociation | null;
    streamId: number;
    flags: Flags;
    bodyLen: number;
    constructor(streamId: number, flags?: string[]);
    toString(): string;
    serialize(): Buffer;
    serializeBody(): Buffer;
    protected bodyRepr(): string;
}
export declare class SettingsFrame extends Frame {
    static MAX_CONCURRENT_STREAMS: number;
    static INITIAL_WINDOW_SIZE: number;
    settings: Record<number, number>;
    constructor(streamId?: number, settings?: Record<number, number> | null, flags?: string[]);
    bodyRepr(): string;
    serializeBody(): Buffer;
}
export declare class DataFrame extends Frame {
    data: Buffer;
    padLength: number;
    constructor(streamId: number, data?: Buffer | string, flags?: string[]);
    serializePaddingData(): Buffer;
    serializeBody(): Buffer;
}
export declare class HeadersFrame extends Frame {
    data: Buffer;
    padLength: number;
    dependsOn: number;
    streamWeight: number;
    exclusive: boolean;
    static ALL_FLAGS: Record<string, number>;
    constructor(streamId: number, data?: Buffer | string, flags?: string[]);
    serializePaddingData(): Buffer;
    serializePriorityData(): Buffer;
    bodyRepr(): string;
    serializeBody(): Buffer;
}
export declare class WindowUpdateFrame extends Frame {
    windowIncrement: number;
    constructor(streamId: number, windowIncrement?: number, flags?: string[]);
    bodyRepr(): string;
    serializeBody(): Buffer;
}
export { InvalidDataError, STRUCT_HL };
//# sourceMappingURL=handshake-frames.d.ts.map