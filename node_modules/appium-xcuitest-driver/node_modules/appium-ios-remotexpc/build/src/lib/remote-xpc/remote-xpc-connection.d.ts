interface Service {
    serviceName: string;
    port: string;
}
interface ServicesResponse {
    services: Service[];
}
declare class RemoteXpcConnection {
    private readonly _address;
    private _socket;
    private _handshake;
    private _isConnected;
    private _services;
    constructor(address: [string, number]);
    /**
     * Connect to the remote device and perform handshake
     * @returns Promise that resolves with the list of available services
     */
    connect(): Promise<ServicesResponse>;
    /**
     * Close the connection
     */
    close(): Promise<void>;
    /**
     * Get the list of available services
     * @returns Array of available services
     */
    getServices(): Service[];
    /**
     * List all available services
     * @returns Array of all available services
     */
    listAllServices(): Service[];
    /**
     * Find a service by name
     * @param serviceName The name of the service to find
     * @returns The service or throws an error if not found
     */
    findService(serviceName: string): Service;
    /**
     * Remove all listeners from the socket to prevent memory leaks
     */
    private cleanupSocket;
    /**
     * Clean up all resources
     */
    private cleanupResources;
    /**
     * Force cleanup by destroying the socket and cleaning up resources
     */
    private forceCleanup;
}
export { RemoteXpcConnection, type Service, type ServicesResponse };
//# sourceMappingURL=remote-xpc-connection.d.ts.map