/**
 * SRP (Secure Remote Password) client implementation following RFC 5054.
 *
 * This class handles the client-side operations of the SRP protocol,
 * including key generation, authentication proof computation, and
 * session key derivation.
 */
export declare class SRPClient {
    private static readonly ZERO;
    private static readonly ONE;
    private static readonly MAX_KEY_GENERATION_ATTEMPTS;
    private readonly N;
    private readonly g;
    private readonly k;
    private readonly N_MINUS_ONE;
    private username;
    private password;
    private _salt;
    private _a;
    private _A;
    private _B;
    private _S;
    private _K;
    private keysGenerated;
    private disposed;
    constructor();
    /**
     * Sets the user identity credentials.
     * Note: Username is set to SRP_USERNAME constant, but can be overridden.
     *
     * @param username - The username for authentication
     * @param password - The password for authentication
     * @throws {SRPError} If username or password is empty
     */
    setIdentity(username: string, password: string): void;
    /**
     * Gets the salt value received from the server.
     *
     * @returns The salt buffer or null if not set
     */
    get salt(): Buffer | null;
    /**
     * Sets the salt value received from the server.
     *
     * @param value - The salt buffer from the server
     * @throws {SRPError} If salt is empty or client is disposed
     */
    set salt(value: Buffer);
    /**
     * Gets the server's public key B.
     *
     * @returns The server's public key as a Buffer or null if not set
     */
    get serverPublicKey(): Buffer | null;
    /**
     * Sets the server's public key B.
     *
     * @param value - The server's public key as a Buffer
     * @throws {SRPError} If the server public key is invalid or client is disposed
     */
    set serverPublicKey(value: Buffer);
    /**
     * Gets the client's public key A.
     *
     * @returns The client's public key as a Buffer
     * @throws {SRPError} If keys are not generated yet or client is disposed
     */
    get publicKey(): Buffer;
    /**
     * Computes the authentication proof M1.
     *
     * @returns The authentication proof as a Buffer
     * @throws {SRPError} If required parameters are not set or client is disposed
     */
    computeProof(): Buffer;
    /**
     * Gets the computed session key K.
     *
     * @returns The session key as a Buffer
     * @throws {SRPError} If session key is not computed or client is disposed
     */
    get sessionKey(): Buffer;
    /**
     * Checks if the client is ready to perform operations.
     *
     * @returns True if salt and server public key are set
     */
    isReady(): boolean;
    /**
     * Checks if session key has been computed.
     *
     * @returns True if a session key is available
     */
    hasSessionKey(): boolean;
    /**
     * Clears sensitive data and disposes the client.
     * After calling this method, the client instance should not be used.
     */
    dispose(): void;
    /**
     * Generates client keys if both salt and server public key are available.
     * This method ensures keys are generated only once.
     */
    private generateClientKeysIfReady;
    /**
     * Generates the client's private and public keys using cryptographically secure methods.
     *
     * @throws {SRPError} If generated public key is invalid or key generation fails
     */
    private generateClientKeys;
    /**
     * Computes the shared secret S and derives the session key K.
     *
     * @throws {SRPError} If required parameters are not set
     */
    private computeSharedSecret;
    /**
     * Validates that identity has been set.
     *
     * @throws {SRPError} If password is not set (username is set by default)
     */
    private validateIdentitySet;
    /**
     * Throws an error if the client has been disposed.
     *
     * @throws {SRPError} If client is disposed
     */
    private throwIfDisposed;
}
//# sourceMappingURL=srp-client.d.ts.map