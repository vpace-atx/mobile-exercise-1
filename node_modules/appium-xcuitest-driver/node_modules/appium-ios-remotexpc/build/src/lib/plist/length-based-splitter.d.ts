import { Transform, type TransformCallback } from 'stream';
/**
 * Options for LengthBasedSplitter
 */
export interface LengthBasedSplitterOptions {
    readableStream?: NodeJS.ReadableStream;
    littleEndian?: boolean;
    maxFrameLength?: number;
    lengthFieldOffset?: number;
    lengthFieldLength?: number;
    lengthAdjustment?: number;
}
/**
 * Splits incoming data into length-prefixed chunks
 */
export declare class LengthBasedSplitter extends Transform {
    private buffer;
    private readonly littleEndian;
    private readonly maxFrameLength;
    private readonly lengthFieldOffset;
    private readonly lengthFieldLength;
    private readonly lengthAdjustment;
    private isXmlMode;
    /**
     * Creates a new LengthBasedSplitter
     * @param options Configuration options
     */
    constructor(options?: LengthBasedSplitterOptions);
    /**
     * Shutdown the splitter and remove all listeners
     */
    shutdown(): void;
    _transform(chunk: Buffer, encoding: BufferEncoding, callback: TransformCallback): void;
    /**
     * Process data as XML
     */
    private processXmlData;
    /**
     * Process data as binary with length prefix
     */
    private processBinaryData;
}
//# sourceMappingURL=length-based-splitter.d.ts.map