/**
 * Represents a tag position in XML
 */
export interface TagPosition {
    start: number;
    end: number;
    isOpening: boolean;
    tagName: string;
}
/**
 * Represents the result of finding tags around a position
 */
export interface TagsAroundPosition {
    beforeTag: TagPosition | null;
    afterTag: TagPosition | null;
}
/**
 * Ensures data is a string for string operations
 *
 * @param data - The data to convert, can be a string or Buffer
 * @returns The data as a string
 */
export declare function ensureString(data: string | Buffer): string;
/**
 * Finds the position of the first Unicode replacement character in the data.
 *
 * @param data - The data to check, can be a string or Buffer
 * @returns The position of the first replacement character, or -1 if not found
 */
export declare function findFirstReplacementCharacter(data: string | Buffer): number;
/**
 * Checks if the provided data contains Unicode replacement characters (ï¿½),
 * which might indicate encoding issues.
 *
 * @param data - The data to check, can be a string or Buffer
 * @returns True if replacement characters are found, false otherwise
 */
export declare function hasUnicodeReplacementCharacter(data: string | Buffer): boolean;
/**
 * Finds the XML declaration and trims any preceding content
 *
 * @param data - The data to process, can be a string or Buffer
 * @returns The trimmed data as a string
 */
export declare function trimBeforeXmlDeclaration(data: string | Buffer): string;
/**
 * Checks for multiple XML declarations and fixes the data by keeping only the first one
 *
 * @param data - The data to check and fix, can be a string or Buffer
 * @returns The fixed data as a string, or the original data if no fix was needed
 */
export declare function fixMultipleXmlDeclarations(data: string | Buffer): string;
/**
 * Removes extra content after the closing plist tag
 *
 * @param data - The data to clean, can be a string or Buffer
 * @returns The cleaned data as a string
 */
export declare function removeExtraContentAfterPlist(data: string | Buffer): string;
/**
 * Checks if the data is valid XML (contains at least one tag)
 *
 * @param data - The data to check, can be a string or Buffer
 * @returns True if the data is valid XML, false otherwise
 */
export declare function isValidXml(data: string | Buffer): boolean;
/**
 * Escapes special XML characters in a string
 *
 * @param str - The string to escape
 * @returns The escaped string
 */
export declare function escapeXml(str: string): string;
/**
 * Checks if the data contains XML plist content by detecting XML declaration or plist tags
 *
 * @param data - The data to check, can be a string or Buffer
 * @returns True if the data contains XML plist content, false otherwise
 */
export declare function isXmlPlistContent(data: string | Buffer): boolean;
/**
 * Finds XML tags around a specific position
 *
 * @param xmlString - The XML string to search
 * @param position - The position to search around
 * @returns An object with the nearest tags before and after the position
 */
export declare function findTagsAroundPosition(xmlString: string, position: number): TagsAroundPosition;
/**
 * Intelligently cleans XML with Unicode replacement characters
 *
 * @param xmlString - The XML string to clean
 * @param badCharPos - The position of the replacement character
 * @returns The cleaned XML string
 */
export declare function cleanXmlWithReplacementChar(xmlString: string, badCharPos: number): string;
//# sourceMappingURL=utils.d.ts.map