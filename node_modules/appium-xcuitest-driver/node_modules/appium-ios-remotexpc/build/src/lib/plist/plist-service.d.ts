import { Socket } from 'net';
import { TLSSocket } from 'tls';
import type { PlistDictionary } from '../types.js';
/**
 * Message type for plist communications
 */
type PlistMessage = PlistDictionary;
/**
 * Options for PlistService
 */
export interface PlistServiceOptions {
    maxFrameLength?: number;
}
/**
 * Service for communication using plist protocol
 */
export declare class PlistService {
    /**
     * Enable verbose error logging
     */
    static enableVerboseErrorLogging(): void;
    /**
     * Disable verbose error logging
     */
    static disableVerboseErrorLogging(): void;
    /**
     * Check if verbose error logging is enabled
     * @returns True if verbose error logging is enabled
     */
    static isVerboseErrorLoggingEnabled(): boolean;
    /**
     * Gets the underlying socket
     * @returns The socket used by this service
     */
    getSocket(): Socket | TLSSocket;
    private readonly _socket;
    private readonly _splitter;
    private readonly _decoder;
    private _encoder;
    private _messageQueue;
    /**
     * Creates a new PlistService instance
     * @param socket The socket to use for communication
     * @param options Configuration options
     */
    constructor(socket: Socket, options?: PlistServiceOptions);
    /**
     * Send a plist message and receive a response
     * @param data Message to send
     * @param timeout Response timeout in ms
     * @returns Promise resolving to the received message
     */
    sendPlistAndReceive(data: PlistMessage, timeout?: number): Promise<PlistMessage>;
    /**
     * Send a plist message
     * @param data Message to send
     * @throws Error if data is null or undefined
     */
    sendPlist(data: PlistMessage): void;
    /**
     * Receive a plist message with timeout
     * @param timeout Timeout in ms
     * @returns Promise resolving to the received message
     * @throws Error if timeout is reached before receiving a message
     */
    receivePlist(timeout?: number): Promise<PlistMessage>;
    /**
     * Close the connection and clean up resources
     */
    close(): void;
    /**
     * Sets up the data pipeline between socket and transformers
     */
    private setupPipeline;
    /**
     * Sets up error handlers for socket and transformers
     */
    private setupErrorHandlers;
    /**
     * Handles errors from any component
     * @param error The error that occurred
     */
    private handleError;
}
export {};
//# sourceMappingURL=plist-service.d.ts.map