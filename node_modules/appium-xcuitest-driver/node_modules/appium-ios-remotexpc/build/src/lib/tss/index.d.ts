import type { PlistDictionary } from '../types.js';
export declare class TSSError extends Error {
    constructor(message: string);
}
export declare class BuildIdentityNotFoundError extends TSSError {
    constructor(message: string);
}
export interface TSSResponse {
    [key: string]: any;
    ApImg4Ticket?: Buffer;
}
export interface RestoreRequestRule {
    Conditions?: {
        ApRawProductionMode?: boolean;
        ApCurrentProductionMode?: boolean;
        ApRawSecurityMode?: boolean;
        ApRequiresImage4?: boolean;
        ApDemotionPolicyOverride?: string;
        ApInRomDFU?: boolean;
        [key: string]: any;
    };
    Actions?: {
        [key: string]: any;
    };
}
export interface ManifestEntry {
    Info?: {
        RestoreRequestRules?: RestoreRequestRule[];
        [key: string]: any;
    };
    Digest?: Buffer;
    Trusted?: boolean;
    [key: string]: any;
}
export interface BuildManifest {
    LoadableTrustCache?: ManifestEntry;
    PersonalizedDMG?: ManifestEntry;
    [key: string]: ManifestEntry | undefined;
}
export declare class TSSRequest {
    private _request;
    constructor();
    /**
     * Apply restore request rules to TSS entry
     * @param tssEntry The TSS entry to modify
     * @param parameters The parameters for rule evaluation
     * @param rules The rules to apply
     * @returns Modified TSS entry
     */
    static applyRestoreRequestRules(tssEntry: PlistDictionary, parameters: PlistDictionary, rules: RestoreRequestRule[]): PlistDictionary;
    /**
     * Update the TSS request with additional options
     * @param options The options to add to the request
     */
    update(options: PlistDictionary): void;
    /**
     * Send the TSS request to Apple's servers and receive the response
     * @returns Promise resolving to TSS response
     */
    sendReceive(): Promise<TSSResponse>;
}
/**
 * Get manifest from Apple's TSS (Ticket Signing Server)
 * @param personalizationIdentifiers The device personalization identifiers
 * @param buildManifest The build manifest dictionary
 * @param queryNonce Function to query nonce
 * @returns Promise resolving to the manifest bytes
 */
export declare function getManifestFromTSS(personalizationIdentifiers: PlistDictionary, buildManifest: PlistDictionary, queryNonce: (personalizedImageType: string) => Promise<Buffer>): Promise<Buffer>;
//# sourceMappingURL=index.d.ts.map