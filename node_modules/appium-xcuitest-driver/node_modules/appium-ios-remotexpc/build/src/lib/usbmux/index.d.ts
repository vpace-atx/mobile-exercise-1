import { Socket } from 'node:net';
import { BaseSocketService } from '../../base-socket-service.js';
import { type PairRecord } from '../pair-record/index.js';
/**
 * Interface for device properties
 */
export interface DeviceProperties {
    ConnectionSpeed: number;
    ConnectionType: string;
    DeviceID: number;
    LocationID: number;
    ProductID: number;
    SerialNumber: string;
    USBSerialNumber: string;
}
/**
 * Interface for a device
 */
export interface Device {
    DeviceID: number;
    MessageType: string;
    Properties: DeviceProperties;
}
export declare const USBMUXD_PORT = 27015;
export declare const DEFAULT_USBMUXD_SOCKET = "/var/run/usbmuxd";
export declare const DEFAULT_USBMUXD_HOST = "127.0.0.1";
export declare const MAX_FRAME_SIZE: number;
export declare const USBMUX_RESULT: {
    OK: number;
    BADCOMMAND: number;
    BADDEV: number;
    CONNREFUSED: number;
};
/**
 * Function to swap bytes for a 16-bit value
 * Used for usbmuxd port numbers
 */
export declare function byteSwap16(value: number): number;
/**
 * Socket options for connecting to usbmuxd
 */
export interface SocketOptions {
    socketPath?: string;
    socketPort?: number;
    socketHost?: string;
    timeout?: number;
}
/**
 * Connects a socket to usbmuxd service
 * @param opts - Connection options
 * @returns Promise that resolves with a socket connected to usbmuxd
 */
export declare function getDefaultSocket(opts?: Partial<SocketOptions>): Promise<Socket>;
/**
 * usbmux class for communicating with usbmuxd
 */
export declare class Usbmux extends BaseSocketService {
    private readonly _decoder;
    private readonly _splitter;
    private readonly _encoder;
    private _tag;
    private readonly _responseCallbacks;
    /**
     * Creates a new usbmux instance
     * @param socketClient - Connected socket to usbmuxd
     */
    constructor(socketClient: Socket);
    /**
     * Returns the BUID of the host computer from usbmuxd
     * @param timeout - Timeout in milliseconds
     * @returns Promise that resolves with the BUID
     */
    readBUID(timeout?: number): Promise<string>;
    /**
     * Reads the pair record of a device, checking local cache first
     * @param udid - Device UDID
     * @param timeout - Timeout in milliseconds
     * @returns Promise that resolves with the pair record or null if not found
     */
    readPairRecord(udid: string, timeout?: number): Promise<PairRecord | null>;
    /**
     * Lists all devices connected to the host
     * @param timeout - Timeout in milliseconds
     * @returns Promise that resolves with the device list
     */
    listDevices(timeout?: number): Promise<Device[]>;
    /**
     * Looks for a device with the passed udid
     * @param udid - Device UDID
     * @param timeout - Timeout in milliseconds
     * @returns Promise that resolves with the device or undefined if not found
     */
    findDevice(udid: string, timeout?: number): Promise<Device | undefined>;
    /**
     * Connects to a certain port on the device
     * @param deviceID - Device ID
     * @param port - Port to connect to
     * @param timeout - Timeout in milliseconds
     * @returns Promise that resolves with the connected socket
     */
    connect(deviceID: string | number, port: number, timeout?: number): Promise<Socket>;
    /**
     * Closes the current USBMUX connection gracefully.
     * For non-tunnel commands, call this after the operation is complete.
     * For Connect commands (which consume the connection),
     * the caller is responsible for closing the returned socket.
     *
     * @returns Promise that resolves when the socket is closed.
     */
    close(): Promise<void>;
    /**
     * Handles incoming data from the decoder
     * @param data - Decoded data
     * @private
     */
    private _handleData;
    /**
     * Sends a plist to usbmuxd
     * @param json - JSON object with tag and payload
     * @private
     */
    private _sendPlist;
    /**
     * Sets up a promise to receive and process a plist response
     * @param timeout - Timeout in milliseconds
     * @param responseCallback - Callback to process the response
     * @returns Object with tag and promise
     * @private
     */
    private _receivePlistPromise;
}
/**
 * Creates a new usbmux instance
 * @param opts - Socket options
 * @returns Promise that resolves with a usbmux instance
 */
export declare function createUsbmux(opts?: Partial<SocketOptions>): Promise<Usbmux>;
/**
 * RelayService class for tunneling connections through a local TCP server
 */
export declare class RelayService {
    private readonly deviceID;
    private readonly devicePort;
    private readonly relayPort;
    private usbmuxClient;
    private server;
    /**
     * Creates a new RelayService instance
     * @param deviceID - The device ID to connect to
     * @param devicePort - The port on the device to connect to
     * @param relayPort - The local port to use for the relay server
     */
    constructor(deviceID: string | number, devicePort: number, relayPort?: number);
    /**
     * Starts the relay service
     * @returns Promise that resolves when the relay is set up
     */
    start(): Promise<void>;
    /**
     * Connects to the relay service
     * @returns Promise that resolves with a socket connected to the relay
     */
    connect(): Promise<Socket>;
    /**
     * Stops the relay service
     */
    stop(): Promise<void>;
}
/**
 * Connects to a device and sets up a relay service in one operation
 * @param deviceID - The device ID to connect to
 * @param port - The port on the device to connect to
 * @param relayPort - The local port to use for the relay server
 * @returns Promise that resolves with a connected socket
 */
export declare function connectAndRelay(deviceID: string | number, port: number, relayPort?: number): Promise<Socket>;
//# sourceMappingURL=index.d.ts.map