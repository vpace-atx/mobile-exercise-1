"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.launchSafari = launchSafari;
exports.startTimeline = startTimeline;
exports.stopTimeline = stopTimeline;
exports.overrideUserAgent = overrideUserAgent;
exports.isJavascriptExecutionBlocked = isJavascriptExecutionBlocked;
exports.garbageCollect = garbageCollect;
const utils_1 = require("../utils");
const bluebird_1 = __importStar(require("bluebird"));
const property_accessors_1 = require("./property-accessors");
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const GARBAGE_COLLECT_TIMEOUT_MS = 5000;
/**
 * @this {RemoteDebugger}
 * @returns {Promise<void>}
 */
async function launchSafari() {
    await this.requireRpcClient().send('launchApplication', {
        bundleId: SAFARI_BUNDLE_ID
    });
}
/**
 * @this {RemoteDebugger}
 * @param {import('../types').EventListener} fn
 * @returns {Promise<any>}
 */
async function startTimeline(fn) {
    this.log.debug('Starting to record the timeline');
    this.requireRpcClient().on('Timeline.eventRecorded', fn);
    return await this.requireRpcClient().send('Timeline.start', {
        appIdKey: (0, property_accessors_1.getAppIdKey)(this),
        pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
    });
}
/**
 * @this {RemoteDebugger}
 * @returns {Promise<any>}
 */
async function stopTimeline() {
    this.log.debug('Stopping to record the timeline');
    await this.requireRpcClient().send('Timeline.stop', {
        appIdKey: (0, property_accessors_1.getAppIdKey)(this),
        pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
    });
}
// Potentially this does not work for mobile safari
/**
 * @this {RemoteDebugger}
 * @param {string} value
 * @returns {Promise<any>}
 */
async function overrideUserAgent(value) {
    this.log.debug('Setting overrideUserAgent');
    return await this.requireRpcClient().send('Page.overrideUserAgent', {
        appIdKey: (0, property_accessors_1.getAppIdKey)(this),
        pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
        value,
    });
}
/**
 * @this {RemoteDebugger}
 * @param {number} [timeoutMs=1000] The maximum amount of milliseconds to wait for
 * a javascript command response
 * @returns {Promise<boolean>} Whether the current page responds to javascript commands
 */
async function isJavascriptExecutionBlocked(timeoutMs = 1000) {
    try {
        await bluebird_1.default.resolve(this.requireRpcClient().send('Runtime.evaluate', {
            expression: '1+1;',
            returnByValue: true,
            appIdKey: (0, property_accessors_1.getAppIdKey)(this),
            pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
        })).timeout(timeoutMs);
        return false;
    }
    catch {
        return true;
    }
}
/**
 * @this {RemoteDebugger}
 * @param {number} [timeoutMs=GARBAGE_COLLECT_TIMEOUT_MS]
 * @returns {Promise<void>}
 */
async function garbageCollect(timeoutMs = GARBAGE_COLLECT_TIMEOUT_MS) {
    this.log.debug(`Garbage collecting with ${timeoutMs}ms timeout`);
    try {
        (0, utils_1.checkParams)({
            appIdKey: (0, property_accessors_1.getAppIdKey)(this),
            pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
        });
    }
    catch {
        this.log.debug(`Unable to collect garbage at this time`);
        return;
    }
    try {
        await bluebird_1.default.resolve(this.requireRpcClient().send('Heap.gc', {
            appIdKey: (0, property_accessors_1.getAppIdKey)(this),
            pageIdKey: (0, property_accessors_1.getPageIdKey)(this),
        })).timeout(timeoutMs);
        this.log.debug(`Garbage collection successful`);
    }
    catch (e) {
        if (e instanceof bluebird_1.TimeoutError) {
            this.log.debug(`Garbage collection timed out after ${timeoutMs}ms`);
        }
        else {
            this.log.debug(`Unable to collect garbage: ${e.message}`);
        }
    }
}
/**
 * @typedef {import('../remote-debugger').RemoteDebugger} RemoteDebugger
 */
//# sourceMappingURL=misc.js.map