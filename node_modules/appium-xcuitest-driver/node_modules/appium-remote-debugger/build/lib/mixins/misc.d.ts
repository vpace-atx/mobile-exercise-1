/**
 * @this {RemoteDebugger}
 * @returns {Promise<void>}
 */
export function launchSafari(this: import("../remote-debugger").RemoteDebugger): Promise<void>;
/**
 * @this {RemoteDebugger}
 * @param {import('../types').EventListener} fn
 * @returns {Promise<any>}
 */
export function startTimeline(this: import("../remote-debugger").RemoteDebugger, fn: import("../types").EventListener): Promise<any>;
/**
 * @this {RemoteDebugger}
 * @returns {Promise<any>}
 */
export function stopTimeline(this: import("../remote-debugger").RemoteDebugger): Promise<any>;
/**
 * @this {RemoteDebugger}
 * @param {string} value
 * @returns {Promise<any>}
 */
export function overrideUserAgent(this: import("../remote-debugger").RemoteDebugger, value: string): Promise<any>;
/**
 * @this {RemoteDebugger}
 * @param {number} [timeoutMs=1000] The maximum amount of milliseconds to wait for
 * a javascript command response
 * @returns {Promise<boolean>} Whether the current page responds to javascript commands
 */
export function isJavascriptExecutionBlocked(this: import("../remote-debugger").RemoteDebugger, timeoutMs?: number): Promise<boolean>;
/**
 * @this {RemoteDebugger}
 * @param {number} [timeoutMs=GARBAGE_COLLECT_TIMEOUT_MS]
 * @returns {Promise<void>}
 */
export function garbageCollect(this: import("../remote-debugger").RemoteDebugger, timeoutMs?: number): Promise<void>;
export type RemoteDebugger = import("../remote-debugger").RemoteDebugger;
//# sourceMappingURL=misc.d.ts.map