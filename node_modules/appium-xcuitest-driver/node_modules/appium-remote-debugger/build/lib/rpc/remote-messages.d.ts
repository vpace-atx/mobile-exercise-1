/**
 *
 * @param {string} command
 * @returns {boolean}
 */
export function isDirectCommand(command: string): boolean;
export class RemoteMessages {
    /**
     *
     * @param {string} connId
     * @returns {import('../types').RawRemoteCommand}
     */
    setConnectionKey(connId: string): import("../types").RawRemoteCommand;
    /**
     *
     * @param {string} connId
     * @param {import('../types').AppIdKey} appIdKey
     * @returns {import('../types').RawRemoteCommand}
     */
    connectToApp(connId: string, appIdKey: import("../types").AppIdKey): import("../types").RawRemoteCommand;
    /**
     *
     * @param {string} connId
     * @param {string} senderId
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} [pageIdKey]
     * @returns {import('../types').RawRemoteCommand}
     */
    setSenderKey(connId: string, senderId: string, appIdKey: import("../types").AppIdKey, pageIdKey?: import("../types").PageIdKey): import("../types").RawRemoteCommand;
    /**
     *
     * @param {string} connId
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} [pageIdKey]
     * @param {boolean} [enabled]
     * @returns {import('../types').RawRemoteCommand}
     */
    indicateWebView(connId: string, appIdKey: import("../types").AppIdKey, pageIdKey?: import("../types").PageIdKey, enabled?: boolean): import("../types").RawRemoteCommand;
    /**
     *
     * @param {string} bundleId
     * @returns {import('../types').RawRemoteCommand}
     */
    launchApplication(bundleId: string): import("../types").RawRemoteCommand;
    /**
     *
     * @param {import('../types').RemoteCommandOpts & import('../types').ProtocolCommandOpts} opts
     * @returns {import('../types').RawRemoteCommand}
     */
    getFullCommand(opts: import("../types").RemoteCommandOpts & import("../types").ProtocolCommandOpts): import("../types").RawRemoteCommand;
    /**
     *
     * @param {import('../types').RemoteCommandOpts & import('../types').ProtocolCommandOpts} opts
     * @returns {import('../types').RawRemoteCommand}
     */
    getMinimalCommand(opts: import("../types").RemoteCommandOpts & import("../types").ProtocolCommandOpts): import("../types").RawRemoteCommand;
    /**
     *
     * @param {import('../types').RemoteCommandOpts & import('../types').ProtocolCommandOpts} opts
     * @returns {import('../types').RawRemoteCommand}
     */
    getDirectCommand(opts: import("../types").RemoteCommandOpts & import("../types").ProtocolCommandOpts): import("../types").RawRemoteCommand;
    /**
     *
     * @param {string} command
     * @param {import('../types').RemoteCommandOpts} opts
     * @returns {import('../types').RawRemoteCommand}
     */
    getRemoteCommand(command: string, opts: import("../types").RemoteCommandOpts): import("../types").RawRemoteCommand;
}
export default RemoteMessages;
//# sourceMappingURL=remote-messages.d.ts.map