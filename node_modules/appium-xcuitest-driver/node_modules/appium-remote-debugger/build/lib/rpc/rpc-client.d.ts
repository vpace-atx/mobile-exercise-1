export const NEW_APP_CONNECTED_ERROR: "New application has connected";
export const EMPTY_PAGE_DICTIONARY_ERROR: "Empty page dictionary received";
export class RpcClient {
    /**
     *
     * @param {RpcClientOptions} [opts={}]
     */
    constructor(opts?: RpcClientOptions);
    /** @type {RpcMessageHandler|undefined} */
    messageHandler: RpcMessageHandler | undefined;
    /** @type {RemoteMessages|undefined} */
    remoteMessages: RemoteMessages | undefined;
    /** @type {boolean} */
    connected: boolean;
    /** @type {boolean} */
    isSafari: boolean;
    /** @type {string} */
    connId: string;
    /** @type {string} */
    senderId: string;
    /** @type {number} */
    msgId: number;
    /** @type {string|undefined} */
    udid: string | undefined;
    /** @type {boolean|undefined} */
    logAllCommunication: boolean | undefined;
    /** @type {boolean|undefined} */
    logAllCommunicationHexDump: boolean | undefined;
    /** @type {number|undefined} */
    socketChunkSize: number | undefined;
    /** @type {number|undefined} */
    webInspectorMaxFrameLength: number | undefined;
    /** @type {boolean|undefined} */
    fullPageInitialization: boolean | undefined;
    /** @type {string|undefined} */
    bundleId: string | undefined;
    /** @type {number | undefined} */
    pageLoadTimeoutMs: number | undefined;
    /** @type {string} */
    platformVersion: string;
    /** @type {string[]} */
    _contexts: string[];
    /** @type {AppToTargetsMap} */
    _targets: AppToTargetsMap;
    /** @type {EventEmitter} */
    _targetSubscriptions: EventEmitter;
    /** @type {PendingTargetNotification | undefined} */
    _pendingTargetNotification: PendingTargetNotification | undefined;
    /**
     * @param {boolean} connected
     */
    set isConnected(connected: boolean);
    /**
     * @returns {boolean}
     */
    get isConnected(): boolean;
    _provisionedPages: Set<any>;
    _pageSelectionLock: any;
    _pageSelectionMonitor: EventEmitter<[never]>;
    /**
     * @returns {string[]}
     */
    get contexts(): string[];
    /**
     * @returns {AppToTargetsMap}
     */
    get targets(): AppToTargetsMap;
    /**
     * @returns {EventEmitter}
     */
    get targetSubscriptions(): EventEmitter;
    /**
     *
     * @param {string} event
     * @param {Function} listener
     * @returns {this}
     */
    on(event: string, listener: Function): this;
    /**
     *
     * @param {string} event
     * @param {Function} listener
     * @returns {this}
     */
    once(event: string, listener: Function): this;
    /**
     * @param {string} event
     * @param {Function} listener
     * @returns {this}
     */
    off(event: string, listener: Function): this;
    /**
     *
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} pageIdKey
     * @returns {Promise<import('../types').TargetId | undefined>}
     */
    waitForTarget(appIdKey: import("../types").AppIdKey, pageIdKey: import("../types").PageIdKey): Promise<import("../types").TargetId | undefined>;
    /**
     *
     * @param {string} command
     * @param {import('../types').RemoteCommandOpts} opts
     * @param {boolean} [waitForResponse=true]
     * @returns {Promise<any>}
     */
    send(command: string, opts: import("../types").RemoteCommandOpts, waitForResponse?: boolean): Promise<any>;
    /**
     *
     * @template {boolean} TWaitForResponse
     * @param {string} command
     * @param {import('../types').RemoteCommandOpts} opts
     * @param {TWaitForResponse} [waitForResponse=true]
     * @returns {Promise<TWaitForResponse extends true ? import('../types').RemoteCommandOpts : any>}
     */
    sendToDevice<TWaitForResponse extends boolean>(command: string, opts: import("../types").RemoteCommandOpts, waitForResponse?: TWaitForResponse): Promise<TWaitForResponse extends true ? import("../types").RemoteCommandOpts : any>;
    connect(): Promise<void>;
    disconnect(): Promise<void>;
    /**
     * @param {import('../types').RemoteCommand} command
     * @returns {Promise<void>}
     */
    sendMessage(command: import("../types").RemoteCommand): Promise<void>;
    /**
     * @param {any} data
     * @returns {Promise<void>}
     */
    receive(data: any): Promise<void>;
    /**
     *
     * @param {Error | undefined} err
     * @param {import('../types').AppIdKey} app
     * @param {import('../types').TargetInfo} targetInfo
     * @returns {Promise<void>}
     */
    addTarget(err: Error | undefined, app: import("../types").AppIdKey, targetInfo: import("../types").TargetInfo): Promise<void>;
    /**
     *
     * @param {Error | undefined} err
     * @param {import('../types').AppIdKey} app
     * @param {import('../types').ProvisionalTargetInfo} targetInfo
     * @returns {Promise<void>}
     */
    updateTarget(err: Error | undefined, app: import("../types").AppIdKey, targetInfo: import("../types").ProvisionalTargetInfo): Promise<void>;
    /**
     *
     * @param {Error | undefined} err
     * @param {import('../types').AppIdKey} app
     * @param {import('../types').TargetInfo} targetInfo
     * @returns {Promise<void>}
     */
    removeTarget(err: Error | undefined, app: import("../types").AppIdKey, targetInfo: import("../types").TargetInfo): Promise<void>;
    /**
     * @param {import('../types').AppIdKey} [appIdKey]
     * @param {import('../types').PageIdKey} [pageIdKey]
     * @returns {string | undefined}
     */
    getTarget(appIdKey?: import("../types").AppIdKey, pageIdKey?: import("../types").PageIdKey): string | undefined;
    /**
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} pageIdKey
     * @param {PageReadinessDetector} [pageReadinessDetector]
     * @returns {Promise<void>}
     */
    selectPage(appIdKey: import("../types").AppIdKey, pageIdKey: import("../types").PageIdKey, pageReadinessDetector?: PageReadinessDetector): Promise<void>;
    /**
     * Mimic every step that Desktop Safari Develop tools uses to initialize a
     * Web Inspector session
     *
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} pageIdKey
     * @param {import('../types').TargetId} [targetId]
     * @returns {Promise<boolean>}
     */
    _initializePage(appIdKey: import("../types").AppIdKey, pageIdKey: import("../types").PageIdKey, targetId?: import("../types").TargetId): Promise<boolean>;
    /**
     *
     * @param {import('../types').AppIdKey} appIdKey
     * @returns {Promise<[string, Record<string, any>]>}
     */
    selectApp(appIdKey: import("../types").AppIdKey): Promise<[string, Record<string, any>]>;
    /**
     *
     * @param {Error?} err
     * @param {Record<string, any>} context
     */
    onExecutionContextCreated(err: Error | null, context: Record<string, any>): void;
    /**
     * @returns {void}
     */
    onGarbageCollected(): void;
    /**
     *
     * @param {Error?} err
     * @param {Record<string, any>} scriptInfo
     */
    onScriptParsed(err: Error | null, scriptInfo: Record<string, any>): void;
    /**
     *
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} pageIdKey
     * @param {import('../types').TargetId} targetId
     * @returns {Promise<void>}
     */
    _resumeTarget(appIdKey: import("../types").AppIdKey, pageIdKey: import("../types").PageIdKey, targetId: import("../types").TargetId): Promise<void>;
    /**
     *
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} pageIdKey
     * @param {import('../types').TargetId} targetId
     * @param {PageReadinessDetector} [pageReadinessDetector]
     * @returns {Promise<void>}
     */
    _waitForPageReadiness(appIdKey: import("../types").AppIdKey, pageIdKey: import("../types").PageIdKey, targetId: import("../types").TargetId, pageReadinessDetector?: PageReadinessDetector): Promise<void>;
    /**
     *
     * @param {import('../types').AppIdKey} appIdKey
     * @param {import('../types').PageIdKey} pageIdKey
     * @returns {Promise<void>}
     */
    waitForPage(appIdKey: import("../types").AppIdKey, pageIdKey: import("../types").PageIdKey): Promise<void>;
}
export default RpcClient;
export type RpcClientOptions = {
    bundleId?: string | undefined;
    platformVersion?: string | undefined;
    isSafari?: boolean | undefined;
    logAllCommunication?: boolean | undefined;
    logAllCommunicationHexDump?: boolean | undefined;
    webInspectorMaxFrameLength?: number | undefined;
    socketChunkSize?: number | undefined;
    fullPageInitialization?: boolean | undefined;
    pageLoadTimeoutMs?: number | undefined;
    udid?: string | undefined;
};
export type PageDict = {
    [key: import("../types").PageIdKey]: import("../types").TargetId;
};
export type PagesToTargets = PageDict & {
    provisional?: import("../types").ProvisionalTargetInfo;
    lock: AsyncLock;
};
export type AppToTargetsMap = {
    [key: import("../types").AppIdKey]: PagesToTargets;
};
export type PageReadinessDetector = {
    timeoutMs: number;
    readinessDetector: (readyState: string) => boolean;
};
export type PendingTargetNotification = [import("../types").AppIdKey, import("../types").PageIdKey, PageReadinessDetector | undefined];
import RpcMessageHandler from './rpc-message-handler';
import { RemoteMessages } from './remote-messages';
import { EventEmitter } from 'node:events';
//# sourceMappingURL=rpc-client.d.ts.map