"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AfcWritableFileStream = exports.AfcReadableFileStream = void 0;
const stream_1 = __importDefault(require("stream"));
const lodash_1 = __importDefault(require("lodash"));
const logger_1 = require("../logger");
class AfcReadableFileStream extends stream_1.default.Readable {
    constructor(fileHandle, afcService, options) {
        super(options);
        this._fileHandle = fileHandle;
        this._afcService = afcService;
        this._autoDestroy = !!options.autoDestroy;
        this._destroyed = false;
    }
    _read(size) {
        (async () => {
            try {
                const data = await this._afcService.readFile(this._fileHandle, size);
                if (!this._destroyed) {
                    this.push(lodash_1.default.isEmpty(data) ? null : data);
                }
            }
            catch (e) {
                if (this._autoDestroy) {
                    this.destroy(e);
                }
                else {
                    this.emit('error', e);
                }
            }
        })();
    }
    _destroy(err, done) {
        if (this._destroyed) {
            return;
        }
        this._destroyed = true;
        this.push(null);
        (async () => {
            try {
                await this._afcService.closeFileHandle(this._fileHandle);
                done(err);
            }
            catch (e) {
                if (err) {
                    logger_1.log.debug(e);
                }
                else {
                    err = e;
                }
                done(err);
            }
        })();
    }
}
exports.AfcReadableFileStream = AfcReadableFileStream;
class AfcWritableFileStream extends stream_1.default.Writable {
    constructor(fileHandle, afcService, options) {
        super(options);
        this._fileHandle = fileHandle;
        this._afcService = afcService;
        this._autoDestroy = !!options.autoDestroy;
        this._destroyed = false;
    }
    _write(chunk, encoding, next) {
        (async () => {
            try {
                await this._afcService.writeFile(this._fileHandle, chunk);
                next();
            }
            catch (e) {
                if (this._autoDestroy) {
                    this.destroy(e);
                }
                next(e);
            }
        })();
    }
    _destroy(err, done) {
        if (this._destroyed) {
            return;
        }
        this._destroyed = true;
        (async () => {
            try {
                await this._afcService.closeFileHandle(this._fileHandle);
                done(err);
            }
            catch (e) {
                if (err) {
                    logger_1.log.debug(e);
                }
                else {
                    err = e;
                }
                done(err);
            }
        })();
    }
}
exports.AfcWritableFileStream = AfcWritableFileStream;
//# sourceMappingURL=streams.js.map