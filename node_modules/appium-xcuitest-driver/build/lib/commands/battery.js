"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_js_1 = __importDefault(require("../logger.js"));
const utils_js_1 = require("../utils.js");
exports.default = {
    /**
     * Reads the battery information from the device under test.
     *
     * This endpoint only returns reliable result on real devices.
     *
     * @returns {Promise<import('./types').BatteryInfo & {advanced: Record<string, any>}>}
     * @this {import('../driver').XCUITestDriver}
     */
    async mobileGetBatteryInfo() {
        let batteryInfoFromShimService;
        if ((0, utils_js_1.isIos18OrNewer)(this.opts) && this.isRealDevice()) {
            let remoteXPCConnection;
            try {
                const { Services } = await import('appium-ios-remotexpc');
                let { diagnosticsService, remoteXPC } = await Services.startDiagnosticsService(this.device.udid);
                remoteXPCConnection = remoteXPC;
                batteryInfoFromShimService = await diagnosticsService.ioregistry({
                    ioClass: 'IOPMPowerSource',
                    returnRawJson: true,
                });
            }
            catch (err) {
                logger_js_1.default.error(`Failed to get battery info from DiagnosticsService: ${err.message}`);
            }
            finally {
                if (remoteXPCConnection) {
                    logger_js_1.default.info(`Closing remoteXPC connection for device ${this.device.udid}`);
                    await remoteXPCConnection.close();
                }
            }
        }
        const batteryInfoFromWda = /** @type {import('./types').BatteryInfo}} */ (await this.proxyCommand('/wda/batteryInfo', 'GET'));
        return {
            ...batteryInfoFromWda,
            advanced: batteryInfoFromShimService || {},
        };
    },
};
/**
 * @typedef {import('./types').BatteryInfo} BatteryInfo
 */
//# sourceMappingURL=battery.js.map