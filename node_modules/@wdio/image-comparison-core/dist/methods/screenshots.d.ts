import type { FullPageScreenshotOptions, FullPageScreenshotNativeMobileOptions, FullPageScreenshotsData, TakeWebElementScreenshot, TakeWebElementScreenshotData } from './screenshots.interfaces.js';
import type { RectanglesOutput } from './rectangles.interfaces.js';
/**
 * Take a full page screenshots for desktop / iOS / Android
 */
export declare function getMobileFullPageNativeWebScreenshotsData(browserInstance: WebdriverIO.Browser, options: FullPageScreenshotNativeMobileOptions): Promise<FullPageScreenshotsData>;
/**
 * Take a full page screenshot for Android with Chromedriver
 */
export declare function getAndroidChromeDriverFullPageScreenshotsData(browserInstance: WebdriverIO.Browser, options: FullPageScreenshotOptions): Promise<FullPageScreenshotsData>;
/**
 * Take a full page screenshots
 */
export declare function getDesktopFullPageScreenshotsData(browserInstance: WebdriverIO.Browser, options: FullPageScreenshotOptions): Promise<FullPageScreenshotsData>;
/**
 * Take a screenshot
 */
export declare function takeBase64Screenshot(browserInstance: WebdriverIO.Browser): Promise<string>;
/**
 * Take a bidi screenshot
 */
export declare function takeBase64BiDiScreenshot({ browserInstance, origin, clip, }: {
    browserInstance: WebdriverIO.Browser;
    origin?: 'viewport' | 'document';
    clip?: RectanglesOutput;
}): Promise<string>;
/**
 * Log an error for not being able to hide remove elements
 *
 * @TODO: remove the any
 */
export declare function logHiddenRemovedError(error: any): void;
/**
 * Take an element screenshot on the web
 */
export declare function takeWebElementScreenshot({ addressBarShadowPadding, browserInstance, devicePixelRatio, deviceRectangles, element, fallback, initialDevicePixelRatio, isEmulated, innerHeight, isAndroid, isAndroidChromeDriverScreenshot, isAndroidNativeWebScreenshot, isIOS, isLandscape, toolBarShadowPadding, }: TakeWebElementScreenshot): Promise<TakeWebElementScreenshotData>;
//# sourceMappingURL=screenshots.d.ts.map